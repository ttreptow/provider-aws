/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VaultParameters defines the desired state of Vault
type VaultParameters struct {
	// Region is which region the Vault will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The AccountId value is the AWS account ID. This value must match the AWS
	// account ID associated with the credentials used to sign the request. You
	// can either specify an AWS account ID or optionally a single '-' (hyphen),
	// in which case Amazon S3 Glacier uses the AWS account ID associated with the
	// credentials used to sign the request. If you specify your account ID, do
	// not include any hyphens ('-') in the ID.
	// +kubebuilder:validation:Required
	AccountID             *string `json:"accountID"`
	CustomVaultParameters `json:",inline"`
}

// VaultSpec defines the desired state of Vault
type VaultSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VaultParameters `json:"forProvider"`
}

// VaultObservation defines the observed state of Vault
type VaultObservation struct {
	// The URI of the vault that was created.
	Location *string `json:"location,omitempty"`
}

// VaultStatus defines the observed state of Vault.
type VaultStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VaultObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vault is the Schema for the Vaults API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Vault struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultSpec   `json:"spec"`
	Status            VaultStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultList contains a list of Vaults
type VaultList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vault `json:"items"`
}

// Repository type metadata.
var (
	VaultKind             = "Vault"
	VaultGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VaultKind}.String()
	VaultKindAPIVersion   = VaultKind + "." + GroupVersion.String()
	VaultGroupVersionKind = GroupVersion.WithKind(VaultKind)
)

func init() {
	SchemeBuilder.Register(&Vault{}, &VaultList{})
}
